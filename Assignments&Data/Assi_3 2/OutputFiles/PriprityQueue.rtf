{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red204\green0\blue203;\red51\green153\blue0;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf2 using\cf0  System;\
\cf2 using\cf0  System.Collections;\
\cf2 using\cf0  System.Collections.Generic;\
\cf2 using\cf0  System.Linq;\
\cf2 using\cf0  System.Text;\
\cf2 using\cf0  System.Threading.Tasks;\
\
\cf2 namespace\cf0  AI_ML\
\{\
   \
    \cf2 public\cf0  \cf2 class\cf0  PrioQueue\
    \{\
        \cf2 int\cf0  total_size;\
        SortedDictionary<\cf2 int\cf0 , Queue> storage;\
\
        \cf2 public\cf0  PrioQueue()\
        \{\
            \cf2 this\cf0 .storage = \cf2 new\cf0  SortedDictionary<\cf2 int\cf0 , Queue>();\
            \cf2 this\cf0 .total_size = \cf3 0\cf0 ;\
        \}\
\
        \cf2 public\cf0  \cf2 bool\cf0  IsEmpty()\
        \{\
            \cf2 return\cf0  (total_size == \cf3 0\cf0 );\
        \}\
\
        \cf2 public\cf0  \cf2 object\cf0  Dequeue()\
        \{\
            \cf2 if\cf0  (IsEmpty())\
            \{\
                \cf2 throw\cf0  \cf2 new\cf0  Exception(\cf3 "Please check that priorityQueue is not empty before dequeing"\cf0 );\
            \}\
            \cf2 else\
\cf0                 \cf2 foreach\cf0  (Queue q \cf2 in\cf0  storage.Values)\
                \{\
                    \cf4 // we use a sorted dictionary \
\cf0                     \cf2 if\cf0  (q.Count > \cf3 0\cf0 )\
                    \{\
                        total_size--;\
                        \cf2 return\cf0  q.Dequeue();\
                    \}\
                \}\
\
            \cf2 return\cf0  \cf3 null\cf0 ; \cf4 // not supposed to reach here. \
\cf0         \}\
\
        \cf4 // same as above, except for peek. \
\
\cf0         \cf2 public\cf0  \cf2 object\cf0  Peek()\
        \{\
            \cf2 if\cf0  (IsEmpty())\
                \cf2 throw\cf0  \cf2 new\cf0  Exception(\cf3 "Please check that priorityQueue is not empty before dequeing"\cf0 );\
            \cf2 else\
\cf0                 \cf2 foreach\cf0  (Queue q \cf2 in\cf0  storage.Values)\
                \{\
                    \cf2 if\cf0  (q.Count > \cf3 0\cf0 )\
                        \cf2 return\cf0  q.Peek();\
                \}\
\
            \cf2 return\cf0  \cf3 null\cf0 ; \cf4 // not supposed to reach here. \
\cf0         \}\
\
        \cf2 public\cf0  \cf2 object\cf0  Dequeue(\cf2 int\cf0  prio)\
        \{\
            total_size--;\
            \cf2 return\cf0  storage[prio].Dequeue();\
        \}\
\
        \cf2 public\cf0  \cf2 void\cf0  Enqueue(\cf2 object\cf0  item, \cf2 int\cf0  prio)\
        \{\
            \cf2 if\cf0  (!storage.ContainsKey(prio))\
            \{\
                storage.Add(prio, \cf2 new\cf0  Queue());\
                Enqueue(item, prio);\
                \cf4 // run again \
\
\cf0             \}\
            \cf2 else\
\cf0             \{\
                storage[prio].Enqueue(item);\
                total_size++;\
            \}\
        \}\
    \} \
\
\}\
\
}