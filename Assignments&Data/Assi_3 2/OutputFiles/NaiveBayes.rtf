{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red204\green0\blue203;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf2 using\cf0  System;\
\cf2 using\cf0  System.Collections.Generic;\
\cf2 using\cf0  System.Linq;\
\cf2 using\cf0  System.Text;\
\cf2 using\cf0  System.Threading.Tasks;\
\
\cf2 namespace\cf0  AI_ML\
\{\
    \cf2 class\cf0  NaiveBayesNode\
    \{\
        \cf2 public\cf0  \cf2 double\cf0 [] CP=\{\cf3 1\cf0 ,\cf3 0\cf0 ,\cf3 0\cf0 \} ;\
        \cf2 public\cf0  List<NaiveBayesNode> Child = \cf2 new\cf0  List<NaiveBayesNode>();\
    \}\
\
\cf2 class\cf0  NBMode\
    \{\
        \cf2 private\cf0  CommonData data;\
        NaiveBayesNode Root = \cf2 new\cf0  NaiveBayesNode();\
\
        \cf2 public\cf0  NBMode(CommonData data)\
        \{\
            \cf2 this\cf0 .data = data;\
\
            \cf2 for\cf0  (\cf2 int\cf0  wid = \cf3 0\cf0 ; wid < \cf3 4000\cf0 ; wid++)\
            \{ Root.Child.Add(\cf2 new\cf0  NaiveBayesNode()); \}\
\
            \cf2 double\cf0  onecount=\cf3 0\cf0 , twocount=\cf3 0\cf0 ;\
            \
            \cf2 for\cf0  (\cf2 int\cf0  i = \cf3 0\cf0 ; i < \cf3 1200\cf0 ; i++)\
            \{\
                \cf2 if\cf0  (data.TrainLabel[i] == \cf3 1\cf0 ) onecount++;\
                \cf2 if\cf0  (data.TrainLabel[i] == \cf3 2\cf0 ) twocount++;\
            \}\
\
            Root.CP[\cf3 1\cf0 ] = onecount / (onecount + twocount);\
            Root.CP[\cf3 2\cf0 ]=twocount/ (onecount + twocount);\
        \}\
\
        \cf2 internal\cf0  \cf2 void\cf0  Run()\
        \{\
            TrainDataSet();\
\
            TenMostDiscrimatingFeatures();\
\
            TestAndShowAccuracy();\
\
            Console.ReadKey();\
        \}\
\
        \cf2 private\cf0  \cf2 void\cf0  TestAndShowAccuracy()\
        \{\
            \cf2 double\cf0  testtotal = \cf3 0\cf0 , testpos = \cf3 0\cf0 , traintotal = \cf3 0\cf0 , trainpos = \cf3 0\cf0 ;\
\
            \cf2 for\cf0  (\cf2 int\cf0  i = \cf3 0\cf0 ; i < \cf3 1200\cf0 ; i++)\
            \{\
                \cf2 if\cf0  (data.TrainLabel[i] > \cf3 0\cf0 )\
                \{\
                    \cf2 double\cf0  is1=Root.CP[\cf3 1\cf0 ], is2=Root.CP[\cf3 2\cf0 ];\
                    \cf2 for\cf0  (\cf2 int\cf0  wid = \cf3 0\cf0 ; wid < \cf3 4000\cf0 ; wid++)\
                    \{\
                        \cf2 if\cf0  (data.TrainDocIdtoWordIds[i].Contains(wid))\
                        \{\
                            is1 *= Root.Child[wid].CP[\cf3 1\cf0 ];\
                            is2 *= Root.Child[wid].CP[\cf3 2\cf0 ];\
                        \}\
                        \cf2 else\
\cf0                         \{\
                            is1 *= \cf3 1\cf0  - Root.Child[wid].CP[\cf3 1\cf0 ];\
                            is2 *= \cf3 1\cf0  - Root.Child[wid].CP[\cf3 2\cf0 ];\
                        \}\
                    \}\
\
                    \cf2 if\cf0  (is1 > is2)\
                    \{\
                        \cf2 if\cf0  (data.TrainLabel[i] == \cf3 1\cf0 )\
                            trainpos++;\
                    \}\
                    \cf2 else\
\cf0                     \{\
                        \cf2 if\cf0  (data.TrainLabel[i] == \cf3 2\cf0 )\
                            trainpos++;\
                    \}\
                    traintotal++;\
                \}\
\
                \cf2 if\cf0  (data.TestLabel[i] > \cf3 0\cf0 )\
                \{\
                    \cf2 double\cf0  is1 = Root.CP[\cf3 1\cf0 ], is2 = Root.CP[\cf3 2\cf0 ];\
                    \cf2 for\cf0  (\cf2 int\cf0  wid = \cf3 0\cf0 ; wid < \cf3 4000\cf0 ; wid++)\
                    \{\
                        \cf2 if\cf0  (data.TestDocIdtoWordIds[i].Contains(wid))\
                        \{\
                            is1 *= Root.Child[wid].CP[\cf3 1\cf0 ];\
                            is2 *= Root.Child[wid].CP[\cf3 2\cf0 ];\
                        \}\
                        \cf2 else\
\cf0                         \{\
                            is1 *= \cf3 1\cf0  - Root.Child[wid].CP[\cf3 1\cf0 ];\
                            is2 *= \cf3 1\cf0  - Root.Child[wid].CP[\cf3 2\cf0 ];\
                        \}\
                    \}\
\
                    \cf2 if\cf0  (is1 > is2)\
                    \{\
                        \cf2 if\cf0  (data.TestLabel[i] == \cf3 1\cf0 )\
                            testpos++;\
                    \}\
                    \cf2 else\
\cf0                     \{\
                        \cf2 if\cf0  (data.TestLabel[i] == \cf3 2\cf0 )\
                            testpos++;\
                    \}\
                    testtotal++;\
                \}\
            \}\
\
            Console.WriteLine(\cf3 "Test accuracy="\cf0  + testpos / testtotal);\
            Console.WriteLine(\cf3 "Train accuracy="\cf0  + trainpos / traintotal);\
        \}\
\
        \cf2 class\cf0  logcomp\
        \{\
            \cf2 public\cf0  \cf2 int\cf0  wrdid;\
            \cf2 public\cf0  \cf2 double\cf0  logval;\
        \}\
\
        List<logcomp> logcomps = \cf2 new\cf0  List<logcomp>();\
\
        \cf2 private\cf0  \cf2 void\cf0  TenMostDiscrimatingFeatures()\
        \{\
            \cf2 for\cf0 (\cf2 int\cf0  w=\cf3 0\cf0 ;w<\cf3 4000\cf0 ;w++)\
                 \{\
                     logcomp cmp = \cf2 new\cf0  logcomp();\
                     cmp.wrdid = w;\
                     \cf2 if\cf0  (Root.Child[w].CP[\cf3 0\cf0 ] == \cf3 1\cf0 ) \cf2 continue\cf0 ;\
\
                     cmp.logval = Math.Abs(Math.Log(Root.Child[w].CP[\cf3 1\cf0 ], \cf3 2\cf0 ) - Math.Log(Root.Child[w].CP[\cf3 2\cf0 ], \cf3 2\cf0 ));\
                        logcomps.Add(cmp);\
                 \}\
\
            BubbleSort();\
\
            \cf2 for\cf0  (\cf2 int\cf0  iter = \cf3 0\cf0 ; iter < \cf3 10\cf0 ; iter++)\
            \{\
                Console.WriteLine(data.Words[logcomps[iter].wrdid] + \cf3 "="\cf0  + logcomps[iter].logval);\
            \}\
        \}\
\
        \cf2 private\cf0  \cf2 void\cf0  BubbleSort()\
        \{\
            \cf2 for\cf0  (\cf2 int\cf0  i = \cf3 0\cf0 ; i < logcomps.Count; i++)\
            \{\
                \cf2 for\cf0  (\cf2 int\cf0  j = i+\cf3 1\cf0 ; j < logcomps.Count; j++)\
                \{\
                    \cf2 if\cf0  (logcomps[j].logval > logcomps[i].logval)\
                    \{\
                        logcomp temp = logcomps[j];\
                        logcomps[j] = logcomps[i];\
                        logcomps[i] = temp;\
                    \}\
                \}\
            \}\
        \}\
\
        \cf2 private\cf0  \cf2 void\cf0  TrainDataSet()\
        \{\
            \cf2 for\cf0  (\cf2 int\cf0  wid = \cf3 0\cf0 ; wid < \cf3 4000\cf0 ; wid++)\
            \{\
                \cf2 double\cf0  countone = \cf3 0\cf0 , counttwo = \cf3 0\cf0 , total = \cf3 0\cf0 ;\
\
                \cf2 for\cf0  (\cf2 int\cf0  docid = \cf3 0\cf0 ; docid < \cf3 1200\cf0 ; docid++)\
                \{\
                    \cf2 if\cf0  (data.TrainLabel[docid] == \cf3 0\cf0 ) \cf2 continue\cf0 ;\
                    total++;\
                    \cf2 if\cf0  (data.TrainDocIdtoWordIds[docid].Contains(wid))\
                    \{\
                        \cf2 if\cf0  (data.TrainLabel[docid] == \cf3 1\cf0 )\
                            countone++;\
\
                        \cf2 if\cf0  (data.TrainLabel[docid] == \cf3 2\cf0 )\
                            counttwo++;\
                    \}\
                \}\
\
                Root.Child[wid].CP[\cf3 0\cf0 ] = (total - countone - counttwo) / total;\
                Root.Child[wid].CP[\cf3 1\cf0 ] = countone / total;\
                Root.Child[wid].CP[\cf3 2\cf0 ] = counttwo / total;\
            \}\
        \}\
    \}\
}